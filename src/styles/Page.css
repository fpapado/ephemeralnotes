/**
  * CSS to handle how the core page layout behaves
*/

/* Flexible navigation region, depending on screen height.
  * On tall screens, stick to the bottom
  * On short screens, stay static at the top
  * On tall and wide screens ?
  * On tall and narrow screens?
  * On short and wide screens?
  * On short andnarrow screens?
  *
  * NOTE: we also adjust for safe-area-inset-dir, based on which component
  * contributes to layout based on the above
*/
.navigation-header {
  padding-top: 0.5rem;
  padding-bottom: 0.5rem;
  padding-top: calc(constant(safe-area-inset-top, 0px) + 0.5rem);
  padding-top: calc(env(safe-area-inset-top, 0px) + 0.5rem);
}
@supports (padding: max(0px)) {
  .navigation-header {
    padding-top: max(0.5rem, env(safe-area-inset-top));
  }
}

/* Enhance from narrow -> wide screen */
.navigation-container {
  display: flex;
  padding-left: 1rem;
  padding-right: 1rem;
  padding-left: calc(constant(safe-area-inset-left, 0px) + 1rem);
  padding-left: calc(env(safe-area-inset-left, 0px) + 1rem);
  padding-right: calc(constant(safe-area-inset-right, 0px) + 1rem);
  padding-right: calc(env(safe-area-inset-right, 0px) + 1rem);
  align-items: center;
  justify-content: space-between;
  text-align: center;
  overflow-x: auto;
}
/** If CSS math functions are supported, give more accurate padding */
@supports (padding: max(0px)) {
  .navigation-container {
    padding-left: max(1rem, env(safe-area-inset-left));
    padding-right: max(1rem, env(safe-area-inset-right));
  }
}
/* Horizontal spacing without leftover space */
.navigation-container > * + * {
  margin-left: 1rem;
}
/* Total pixel tweaking; set two columns, aligned start; Ephemeral | i */
.navigation-title-about {
  display: grid;
  grid-gap: 1rem;
  gap: 1rem;
  grid-template-columns: 1fr max-content 1fr;
  justify-items: start;
  align-items: center;
}
.navigation-title-about svg {
  vertical-align: middle;
}
/* The bar items stick to the right */
.navigation-bar-flex {
  display: flex;
  align-items: center;
}
main {
  padding: 1rem;
  /** Progressively-enhanced padding left/right/bottom, based on env/constant support */
  padding-left: calc(constant(safe-area-inset-left, 0px) + 1rem);
  padding-left: calc(env(safe-area-inset-left, 0px) + 1rem);
  padding-right: calc(constant(safe-area-inset-right, 0px) + 1rem);
  padding-right: calc(env(safe-area-inset-right, 0px) + 1rem);
  padding-bottom: calc(constant(safe-area-inset-bottom, 0px) + 1rem);
  padding-bottom: calc(env(safe-area-inset-bottom, 0px) + 1rem);
}
/** If CSS math functions are supported, give more accurate padding */
@supports (padding: max(0px)) {
  main {
    padding-left: max(1rem, env(safe-area-inset-left));
    padding-right: max(1rem, env(safe-area-inset-right));
    padding-bottom: max(1rem, env(safe-area-inset-bottom));
  }
}
/* Horizontal spacing without leftover space */
.navigation-bar-flex > * + * {
  margin-left: 1rem;
}

/** On taller screens, the navigation becomes sticky bottom */
@media screen and (min-height: 34rem) {
  .navigation-container {
    display: block;
  }
  /* Reset left margin between secondary and title nav */
  .navigation-container > * + * {
    margin-left: initial;
  }
  /* Total pixel tweaking; set three columns: <- | Ephemeral | i 
    The result is that Ephemeral is "absolutely" centered in the container
    and we still have a minimum gap between the items. Probably also doable with
    flexbox, but I couldn't think of it...
  */
  .navigation-title-about {
    margin-left: auto;
    margin-right: auto;
  }
  .navigation-about {
    justify-self: end;
  }
  .navigation-bar {
    position: fixed;
    bottom: 0;
    left: 0;
    z-index: 9000;
    width: 100%;
    border-color: var(--color-text-faint);
    border-top-width: 1px;
    border-top-style: solid;

    padding: 0.5rem;

    /** Progressively-enhance safe area insets
      * - If env() is supported, set padding-bottom to
      *   env(safe-area-inset-bottom) + a minimum bottom padding.
      * - If safe-area-inset-bottom is undefined, it is 0px
      * - If env is not supported, this whole property is ignored, 
      *   and the previous value (0.5rem) applies :tada:
      *
      * Extra note:
      * All this runs a risk of "more" padding than needed, but it does have broader
      * support. See below for a more accurate version.
    */
    /** Legacy constant() (env()) syntax. */
    padding-left: calc(constant(safe-area-inset-left, 0px) + 0.5rem);
    padding-left: calc(env(safe-area-inset-left, 0px) + 0.5rem);
    padding-right: calc(constant(safe-area-inset-right, 0px) + 0.5rem);
    padding-right: calc(env(safe-area-inset-right, 0px) + 0.5rem);
    padding-bottom: calc(constant(safe-area-inset-bottom, 0px) + 0.5rem);
    padding-bottom: calc(env(safe-area-inset-bottom, 0px) + 0.5rem);
    justify-content: center;
  }
  /* Progressively-enhance to use safe areas in iPhone X etc.
   * Note: for this we need CSS math functions (max, here) to be supported, so
   * we can pick the larger padding bottom, among the minimum and the inset.
   * 
   * This considers one case, in addition to the above:
   *  - safe-area-inset-bottom is supported, and is > 0
   * 
   * Note: min, max and env() are supported in the relevant iOS/Safari
   * versions, so this seems fine. As mentioned above, this also allows us
   * to target versions that report inset-bottom of 0px when viewport-fit is not cover,
   * but that should really be having >0.5rem margin
   * @see https://webkit.org/blog/7929/designing-websites-for-iphone-x/
   */
  @supports (padding: max(0px)) {
    .navigation-bar {
      padding-bottom: max(0.5rem, env(safe-area-inset-bottom));
      padding-left: max(0.5rem, env(safe-area-inset-left));
      padding-right: max(0.5rem, env(safe-area-inset-right));
    }
  }
  /* When sticking to the bottom, the bar items are spaced around, 
   * or evenly if supported.
   * The width is capped to a maximum;
  */
  .navigation-bar-flex {
    width: 100%;
    max-width: 24rem;
    margin-left: auto;
    margin-right: auto;
    display: flex;
    align-items: center;
    justify-content: space-around;
    justify-content: space-evenly;
  }
  /* Set a safe area for the footer (and other content), equal to 4rem (sticky) + inset-bottom */
  main {
    padding-bottom: 4rem;
    padding-bottom: calc(constant(safe-area-inset-bottom, 0px) + 4rem);
    padding-bottom: calc(env(safe-area-inset-bottom, 0px) + 4rem);
  }
}

/** On even taller screens, the title + info header is sticky as well */
@media screen and (min-height: 38rem) {
  .navigation-header {
    position: fixed;
    top: 0;
    z-index: 9000;
    width: 100%;
  }
  /** Safe area for main (more predictable like this, than sticky) */
  main {
    /* Enough area for the header */
    padding-top: 4rem;
    /* Enough area for the header + safe-area */
    padding-top: calc(constant(safe-area-inset-top, 0px) + 4rem);
    padding-top: calc(env(safe-area-inset-top, 0px) + 4rem);
  }
}

/** Show the back-button in display-mode: standalone (i.e. when installed from Home Screen)
  * TODO: Test with an iPhone and verify this matches correctly
*/
.navigation-back-button {
  visibility: hidden;
}
@media all and (display-mode: standalone) {
  .navigation-back-button {
    visibility: visible;
  }
}
